########################## Basic ##########################

FILE(GLOB_RECURSE INCLUDE_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/*.h
    ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp
)

FILE(GLOB_RECURSE SOURCE_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
)

SET(ALL_FILES
    ${INCLUDE_FILES}
    ${SOURCE_FILES}
)

FUNCTION(GROUP_FILES ARGS)
    MATH(EXPR BEGIN_INDEX 0)
    MATH(EXPR END_INDEX "${ARGC} - 1")
    LIST(GET ARGV ${BEGIN_INDEX} TARGET_FILES)
    LIST(GET ARGV ${END_INDEX}   GROUP_PREFIX)
    MESSAGE(STATUS "TARGET_FILES: ${TARGET_FILES}")
    MESSAGE(STATUS "GROUP_PREFIX: ${GROUP_PREFIX}")
    SET(INDEX ${BEGIN_INDEX})
    WHILE(INDEX LESS ${END_INDEX})
        LIST(GET ARGV ${INDEX} FILE)
        GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" DIRECTORY)
        STRING(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "" GROUP "${PARENT_DIR}")
        STRING(REPLACE "/" "\\" GROUP "${GROUP}")
        SET(GROUP "${GROUP_PREFIX}${GROUP}")
        MESSAGE(STATUS "Group ${FILE} to ${GROUP}")
        SOURCE_GROUP("${GROUP}" FILES "${FILE}")
        MATH(EXPR INDEX "${INDEX} + 1")
    ENDWHILE()
ENDFUNCTION()

GROUP_FILES(${INCLUDE_FILES} "Header Files")
GROUP_FILES(${SOURCE_FILES}  "Source Files")

INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}
)

ADD_LIBRARY(
    ${PROJECT_NAME}
    STATIC
    ${ALL_FILES}
)
###########################################################

IF(UNIX)
    SET(EX_LINK_LIBRARIES
        png
        z
    )
ELSE(UNIX)
    SET(EX_LINK_LIBRARIES 
        libpng16_static
        zlibstatic
    )
ENDIF(UNIX)
# Link external libraries.
TARGET_LINK_LIBRARIES(
    ${PROJECT_NAME}
    ${EX_LINK_LIBRARIES}
)